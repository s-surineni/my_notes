* Two things Object.is misses is NaN and -0
* checking for Nan is Number.isNan
* checking for -0 is by 1/-0 gives negative infinity
* Infinity is built in in javascript
* another way to check for Nan is Nan != Nan should be true
* Fundamental Objects
** with which we will use new keyword
** Don't use new
** spend more time on this
** new will costruct objects
** not new will change them into primitive types
* conversion or coercion
** ToPrimitive keeps on calling itself unless it gets a primitive value
** toString
*** -0 toString give "0"
* To see the contents of object you can use JSON.stringify
* toBoolean is a lookup and in javascript [] is true
#+BEGIN_SRC javascript
  var y = '5'
  y++                             // This returns number instead of string
  y

#+END_SRC
* Topics
** types
*** Primitive types
*** abstract operations
*** coercion
*** equality
*** typescript, flow
** scope
** objects
* Types
** In javascript everything is not an object
** primitive types are undefined, null, boolean, string, symbol, number and object
*** undeclared, null, function, array, bignint
*** objects
**** object, function, array
** undefined means does not have a value now
** values returned from typeof operator are strings
*** typeof null returns object
*** typeof function returns function  
*** undefined vs undeclared vs uninitialized
**** in javascript using of undeclared object doesn't throw error but says it is undefined
** special values
*** NaN
**** invalid number 
**** NaN === NaN is false
**** NaN != NaN returns true
**** isNaN can be used to check if value is NaN
**** but isNaN('my son age') returns true which is a problem, it coerces value passed to it to a number and then evaluates it
**** so Number.isNaN should be used 
**** type of NaN is number
*** -0
#+BEGIN_SRC javascript
    var trendRate = -0
    trendRate.toString()            // returns "0" bad idea
    trendRate === 0                 // returns true bad idea
    Object.is(trendRate, -0)        // returns true good idea
    Object.is(trendRate, 0)         // returns false good idea 
  1 / -0 == -Infinity               // gives true
#+END_SRC
*** value / -0 give -Infinity
*** Fundamental objects
**** also called built in objects
**** native functions
