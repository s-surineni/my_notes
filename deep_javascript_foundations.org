* Two things Object.is misses is NaN and -0
* checking for Nan is Number.isNan
* checking for -0 is by 1/-0 gives negative infinity
* Infinity is built in in javascript
* another way to check for Nan is Nan != Nan should be true
* Fundamental Objects
** with which we will use new keyword
** Don't use new
** spend more time on this
** new will costruct objects
** not new will change them into primitive types
* conversion or coercion
** ToPrimitive keeps on calling itself unless it gets a primitive value
** toString
*** -0 toString give "0"
* To see the contents of object you can use JSON.stringify
* toBoolean is a lookup and in javascript [] is true
#+BEGIN_SRC javascript
  var y = '5'
  y++                             // This returns number instead of string
  y

#+END_SRC
* Topics
** types
*** Primitive types
*** abstract operations
*** coercion
*** equality
*** typescript, flow
** scope
** objects
* Types
** In javascript everything is not an object
** primitive types are undefined, null, boolean, string, symbol, number and object
*** undeclared, null, function, array, bignint
*** objects
**** object, function, array
** undefined means does not have a value now
** values returned from typeof operator are strings
*** typeof null returns object
*** typeof function returns function  
*** undefined vs undeclared vs uninitialized
**** in javascript using of undeclared object doesn't throw error but says it is undefined
** special values
*** NaN
**** invalid number 
**** NaN === NaN is false
**** NaN != NaN returns true
**** isNaN can be used to check if value is NaN
**** but isNaN('my son age') returns true which is a problem, it coerces value passed to it to a number and then evaluates it
**** so Number.isNaN should be used 
**** type of NaN is number
*** -0
#+BEGIN_SRC javascript
    var trendRate = -0
    trendRate.toString()            // returns "0" bad idea
    trendRate === 0                 // returns true bad idea
    Object.is(trendRate, -0)        // returns true good idea
    Object.is(trendRate, 0)         // returns false good idea 
  1 / -0 == -Infinity               // gives true
#+END_SRC
*** value / -0 give -Infinity
*** Fundamental objects
**** also called built in objects
**** native functions
**** Don't use new
***** String, Number, Boolean
** Abstract Operations
*** used for type conversion
**** toPrimitive
***** valueOf
***** toString
#+BEGIN_SRC javascript
  toString(-0)                    // gives "0" which is not good

#+END_SRC
***** toString results
****** [] to ""
****** [1,2,3] to 1, 2, 3
****** [null, undefined] to ", "
****** [[[], [], []], []] to ", , ,"
****** [,,,,] to ",,,  "
***** toNumber
****** "" to 0 (root of all evil)
****** "-0" to -0
****** null to 0
****** undefined to NaN
*****  toNumber on object invokes toPrimitive with number hint, so it invokes value of first and toString next and recursively calls valueOf (or toNumber ) on return value of toString
***** toBoolean 
****** less algorithmic more lookup
****** false values "", 0, -0, null, NaN, false, undefined
****** doesn't do coercion just a lookup
***** Cases of coercion
****** string + number gives string
****** unary + on string gives number
****** - operator unary or with string invokes toNumber
****** !! double negate could be explicit
***** Boxing
****** when we use methods on primitives javascript boxes them to objects automatically
*** corner cases
**** [[./corner_cases.png]]
**** [[./corner_cases2.png]]
*** Implicit coercion
**** < operator converts strings to numbers if one of the operand is number
**** it both are strings it wont convert them to numbers 
** double and triple equals
*** == allows coercion
*** === doen not allow coercion
*** == says null and undefined are same
*** == prefers numeric comparison
*** 42 == [42] crazyyyyy
**** == corner cases
***** [] == ![] // this returns true
#+BEGIN_SRC javascript
  var arr1 = []
  var arr2 = []

  arr1 != arr2                    // true because they are objects and they are not same identity

#+END_SRC
**** == booleans corner cases
***** we wouldn't need to do val == true or val == false
* Scope
** where to look for things
** compiler creates plan for scope
** in javascript assigning to variables with same name as global variables in functoins don't create new local variables without var
** if no variable declaration is found at runtime javascript creates a global variable in global scope
** in strict mode global variables are not automatically created if they are not declared
** function expressions add their names in their own local scope
** kyle says prefer named function expressions over anonymous function expressions
** named function expressions name cannot be re assigned
** we should use named function expression because
*** it can refer itself in its body
*** it shows up in stack trace
** lexical scope
*** a compiler figures out scope before execution
*** IIFE runs and vanishes
*** IIFE can be used to convert statements into functions like try catch
** block scoping
*** explicit let block
** const
*** not carrying its cost
*** better to use only with immutables and specially to one's that must not be changed
** hoisting
*** doesn't really exist just giving and made up explanation instead of two pass correct explanation
*** variable used before assigning error comes because parser looks at declaration statements and makes values in the scope to use during runtime and parser doesn't look at variable usages
*** the javascript 2 pass look up makes function declarations work but not function expressions
**** you can call a function that is declared after the statement but not the function expression
**** var hoist tells create a variable and set it to undefined 
**** but let creates a variable and keeps it un initialized
* TODO look again for two pass variable declaration and hoisting
* Closure
** closure is when a function remembers its lexical scope even when function is executed outside that lexical scope
** function is closed over the enclosed scopes variables that are used in this scope
** closure actually closes over the variable not the snapshot of value
** let in for loop actually creates new loop variable
* modules
** namespace pattern
** module pattern requires encapuslation
** the state of a module is held by its methods via closure
** it could be a singleton like iife or multiple instances like factory functions
** in module anythin we export is public otherwise private
** es6 modules are singletons
** there are two types of imports in es6
*** named import
*** namespace import
* ObjectS oriented
** functions this references the execution context for that call and determined entirely by how the function was called
** this keyword has to do with dynamic scoping? so that we can provide different contexts to function 
** there are 4 different ways to invoke a function
*** implicit binding
*** explicit binding 
**** call & apply
***** hard binding
****** setTimeout call function with this set to global object
****** .bind produces a new function with this bound to parameter passed to it
