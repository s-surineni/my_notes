* opensource system for automating deployment, scaling and management of containerized applications
* k8s features
** service discovery/ load balancing
** storage orchestration
** automate rollout/rollback
** self healing
** secret and configuration management
** horizontal scaling
* k8s provides a declarative way to define cluster state
* k8s have master node and worker nodes forming a cluster
* container benefits
** faster on boarding of new developers
** can run multiple versions of same app in containers
** environment consistency between prod and dev
* k8s benefits
** orchestrate containers
** zero downtime deployment
** scaling containers
** createing end to end testing
** ensure application scales properly(if it is truly stateless)
* kubectl talks to api in master node
* that would cause control manager and scheduler to perform some actions
* kubectl commands
** kubectl cluster-info
** kubectl get all
* buy default pods have cluster ip
* pod is basic exeution unit and simplest unit in k8s object model
* pods ip, memory, volumes can be shared across containers
* each pod has unique ip address
* pod containers share same network name sapce
* have same loopbakc network interface
* each container in a pod gets diffrent port
* is is rare to have multiple containers in a pod
* a pod is present in only one node
* pod related commands
** kubectl run
** kubectl get gods
** kubectl get all
** pods and containers are only accessible within k8s cluster by default
** to expose container do kubectl port-forward
** kubectl delete pod
** kubectl delete deployment
** kubectl run my-nginx --image=nginx:alpine
