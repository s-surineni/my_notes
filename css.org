* what is responsiveness
** the size of the box should reduce along with browser width
** the font size should increase decrease with browser zoom
** the font size should react to viewport size?
** everything should look proper(non overlapping) at different sizes
* thinking html
** html page elements should make sense to you
** break down the page into elements and think in terms of elements
* setting size for element
#+begin_src css
 .box {
    width: 100px;
     height: 100px;
    margin-bottom: 10px;
}
#+end_src
* fixed positioning
** other elements will ignore fixed box
** it stays relative to browser window
* positioning allows to changes position from regular document flow
* after using positioning we can move element in 4 different directions
* CSS custom properties
** CSS variables or cascading variables
** set using custom property notation (e.g., --main-color: black;) and
**  are accessed using the var() function (e.g., color: var(--main-color);).
** Declaring a custom property is done using a custom property name that begins with a double hyphen (--), and a property value that can be any valid CSS value. Like any other property, this is written inside a ruleset, like so:
#+begin_src css
element {
  --main-bg-color: brown;
}
#+end_src
A common best practice is to define custom properties on the :root pseudo-class, so that it can be applied globally across your HTML document:
* flexbox
** used to organize child elements in one dimension
** if width and height are not given they only take as much space as the content requires
** child elements align themselves on cross axis by stretching
** justifyContent to align elements on main axis
** alignItems to align elements on cross axis
* common css styles
** box-sizing: border-box;
* html 100%
#+begin_src
If you want to use this method to make the div 100% of the page's height, you have to specify the height as 100% of the body and html as well.

body, html {
  height: 100%;
}

When you don't specify a html or body height, their heights are the sum of the heights of the elements in it.
#+end_src
* grid
** two steps
*** define grid
*** position items
** properties
*** display: grid
*** grid-template-colums: 200px 200px;
**** takes list of track sizes
*** grid-column-start
*** grid-column-end
*** min-content
**** element should be large enough to hold its content
*** minmax
**** we want the content size to be responsive but not smaller to break content
**** works best when combined with content determined track size and viewport determined track size
**** minmax(max-content, 50%)
*** fit-content
*** grid-auto-flow
*** grid-auto-rows
*** grid-column-end: span 2;
**** each item takes two colums
*** grid-column
**** combines grid-column-start and grid-column-end
*** grid-area
*** grid-template-areas
** track sizes
*** static values
*** percentages
*** auto
*** fractional units - fr
*** min-content
