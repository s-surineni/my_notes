#+title: Javascript
* promises
** used in async programming
** object that represents eventual completion or failure of asynchronous operation and its resulting value
** states
*** pending
*** fulfilled
*** rejected
** eagerly evaluated
** consuming promise
#+begin_src javascript
promise.then((data) => console.log(data))
#+end_src
** uncaught in promise comes up if we dont handle rejected state
** then and catch also return promises (is it the same promise or a different one?)
** whatever value we return will be wrapped in promise - what if we dont return anything?
** chain promise by returning from first and chaining it to then
#+begin_src
    axios.get("http://localhost:3000/orders/1")
    .then(({data}) => {
        return axios.get(`http://localhost:3000/addresses/${data.shippingAddress}`);
    })
    .then(({data}) => {
        setText(`City: ${data.city}`);
    })
#+end_src
** this catch will handle error that occured at any previous then. this is because we are returning from then and not nesting them
#+begin_src
    axios.get("http://localhost:3000/orders/1")
    .then(({data}) => {
        axios.get(`http://localhost:3000/addresses/${data.shippingAddress}`);
        throw new Error('Fake Error');
    })
    .then(({data}) => {
        setText(`City: ${data.city}`);
    })
    .catch(setText);
#+end_src
** we can also add catch at multiple places
** use finally to do clean up tasks. it will run no matter promise is success or failure
** creating promise
#+begin_src
  let wait = new Promise(resolve => {
    setTimeout(() => {
      resolve("Timeout!");
    }, 1500);
  });

  wait.then(setText);
#+end_src
** promise can be resolved only once
#+begin_src
  let counter = 0;
  let wait = new Promise(resolve => {
    setInterval(() => {
      console.log("INTERVAL");
      resolve(`Timeout! ${++counter}`);
    }, 1500);
  });

  wait.then(setText).finally(() => appendText(` -- Done ${counter}`));
#+end_src
** rejecting promise
#+begin_src
  let request = new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "http://localhost:3000/users/7");
    xhr.onload = () => {
      if (xhr.status === 200) {
        resolve(xhr.responseText);
      } else {
        reject(xhr.statusText);
      }
    };
    xhr.onerror = () => {
      reject("Request failed!");
    };
    xhr.send();
  });

  request.then(setText).catch(setText);
#+end_src
** Promise.all triggers all promises at once
*** it will wait for all to complete or till first promise fails
#+begin_src
  let categories = axios.get("http://localhost:3000/itemCategories");
  let statuses = axios.get("http://localhost:3000/orderStatuses");
  let userTypes = axios.get("http://localhost:3000/userTypes");
  let address = axios.get("http://localhost:3000/addressTypes");

  Promise.all([categories, statuses, userTypes, address])
    .then(([cat, stat, type, address]) => {
      setText("");
      appendText(JSON.stringify(cat.data));
      appendText(JSON.stringify(stat.data));
      appendText(JSON.stringify(type.data));
      appendText(JSON.stringify(address.data));
    })
    .catch(reasons => {
      setText(reasons);
    });
#+end_src
** Promise.allSettled
** Promise.race returns data from the first api that returns
