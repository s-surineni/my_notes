#+title: Javascript
* promises
** used in async programming
** object that represents eventual completion or failure of asynchronous operation and its resulting value
** states
*** pending
*** fulfilled
*** rejected
** eagerly evaluated
** consuming promise
#+begin_src javascript
promise.then((data) => console.log(data))
#+end_src
** uncaught in promise comes up if we dont handle rejected state
** then and catch also return promises (is it the same promise or a different one?)
** whatever value we return will be wrapped in promise - what if we dont return anything?
** chain promise by returning from first and chaining it to then
#+begin_src
    axios.get("http://localhost:3000/orders/1")
    .then(({data}) => {
        return axios.get(`http://localhost:3000/addresses/${data.shippingAddress}`);
    })
    .then(({data}) => {
        setText(`City: ${data.city}`);
    })
#+end_src
** this catch will handle error that occured at any previous then. this is because we are returning from then and not nesting them
#+begin_src
    axios.get("http://localhost:3000/orders/1")
    .then(({data}) => {
        axios.get(`http://localhost:3000/addresses/${data.shippingAddress}`);
        throw new Error('Fake Error');
    })
    .then(({data}) => {
        setText(`City: ${data.city}`);
    })
    .catch(setText);
#+end_src
** we can also add catch at multiple places
** use finally to do clean up tasks. it will run no matter promise is success or failure
** creating promise
#+begin_src
  let wait = new Promise(resolve => {
    setTimeout(() => {
      resolve("Timeout!");
    }, 1500);
  });

  wait.then(setText);
#+end_src
