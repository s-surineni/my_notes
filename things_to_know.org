* hadoop
* spark streaming
* cassandra
* aggregation and compensation
* difference between soap and rest
* up sert in mongo
* composite index
* where all session data can be stored
* cookies
* in dp when are the stored suproblems are being used. Especially in path finding ones
* how to write singleton which is thread safe
* session
** how is user session maintained
* how are multiple requests handled by spring django
** build loggers to see if new api is being handled by new process or thread and make video about it
* session persitence
* redis
*** task queue
*** caching
** replication
** persitence
** sharding
* threading
*** barrier
*** lock
*** event
*** semaphore
*** condition
*** queue
* how to create AMI so that we can store secure files like firebase credentials
* celery
* design queue
* graphql
* sharding
* how is firebasesdk working
* saving all sent messages in a queue
* implement LRU
* sliding window cache policy
* caching
* amortized analysis
* logging best practises
* http responses
* http
* internet protocols tcp, udp, http
* python requests library features
* probability theory
* jwt token authentication
* graphql
* docker
* k8s
* rpc rabbitmq
* how web servers handle multiple requests at once
** try looking into them by loggind process id, and other details
* how to cause an exception by writing to file at once
** open file in two python interpreters at once
** check how many open connections can you have to a file
* asyncio
* what does thread safety mean
* uml
* api gateway
* central authentication service
* combinatorial mathematics
* connection pooling
** see the performance difference with pooling and without pooling
* all features of redis
* bijection maths
* consistend sharding
* log aggregation
* load balancing
* request headers
* web workers
* local storage
* backend for frontend
* How a shopping cart is maintained
* concurrency
* consistent hashing
* nginx, wsgi, gunicorn
** load balancing
* reverse proxy
* application server, web server
* circuit breakers
* webpack
* event store
** cqrs
** immutable history for free
* inter process communication
* db
** how do we keep history in database
*** history of password
*** history of who had the book
* deploying a web server
* ethical hacking
* django
** prefetch
** signals
** sending confirmation emails
* amortized
* sharding
* service discorvery
* mongo commands syntax
* requests module
** session in requests module
** service discorvery
* socket
* desgin message queue
* how do you avoid eager loading in django
* find employees that doesnt belong to any project
* database joins
* find all comments which do not have replies
* push messages
* kafka
** how one event is processed only once by consumer group
** how the order is maintained
* signals in django
* what can we do with manage.py
* when do you use node, django spring
* advantages of dependency injection
* difference between stack and class methods
* can redis store data on disk
* distribute tansaction
* how django signals are implemented
* how completion works in emacs
* what are message brokers?
** are they just storage for events?
* oauth
* see how is search is implemented in django admin
* message queues have inbuilt functionality of retrying to send message
* thrift facebook
* heart beat maintanance
* deploying the project
* service discovery
* see how django creates processes threads by looging process id and thread id
* distributed transaction
* how to handle multiple transactions by multiple clients at once
** mutex lock
* certificate based authentication
* inner query
*  outer join
* point to point, request / reply, and publish/subscribe messaging, messaging and SOA systems, streaming
* scalability
* reliability
* security
* stack memory
* heap memory
* how do you shard based on location
* how do you implement timer in the server
* how does dependency injection work in spring boot
* geo hashing
* side car
* blocking queue
* race condition
* table structure
** will you using id in same table
** will you use another table to store related ids
* how do you manage multiple parallel transactions
* temportal database for paginitaion
* how can you send 1000000 messages at once
* database indexing
* how can we stop workers/messages queues from duplicate work
* design and implment a queue
* cdn
* zookeeper
* hash functions
* fast api
* worker queue with kafka or rabbitmq
* how does ip change everytime computer starts
* linux
** what is default gateway
** dhcp
* finance
** find how interest in calculated on mutual funds and when it is credited
* open stack
* terraform
* grpc
* data sampling
* final class and static method, where they are set with values, like dbcontext
* how to implement auto suggestions like done by google
* distributed commit
* vpn
* vault hashicorp
