* session
** how is user session maintained
* redis
*** task queue
*** caching
** replication
** persitence
** sharding
* threading
*** barrier
*** lock
*** event
*** semaphore
*** condition
* graphql
* design queue
* sharding
* how is firebasesdk working
* saving all sent messages in a queue
* implement LRU
* sliding window cache policy
* how to create AMI so that we can store secure files like firebase credentials
* amortized analysis
* logging best practises
* http responses
* http
* internet protocols tcp
* python requests library features
* probability theory
* jwt token authentication
* graphql
* docker
* k8s
* rpc rabbitmq
* celery
* how web servers handle multiple requests at once
** try looking into them by loggind process id, and other details
* how to cause an exception by writing to file at once
* asyncio
* what does thread safety mean
* uml
* api gateway
* central authentication service
* combinatorial mathematics
* connection pooling
* all features of redis
* bijection maths
* consistend sharding
* log aggregation
* load balancing
* request headers
* web workers
* local storage
* backend for frontend
* How a shopping cart is maintained
* concurrency
* consistent hashing
* nginx, wsgi, gunicorn
* circuit breakers
* webpack
* event store
** cqrs
** immutable history for free
* inter process communication
* db
** how do we keep history in database
*** history of password
*** history of who had the book
* deploying a web server
* ethical hacking
* django
** prefetch
** signals
** sendign confirmation emails
