* my observations
** different kinds of operations on trees
*** adding a node
*** deletion
*** verifying if leaf
*** accessing parent or child
*** traversing
* good rich
** trees
*** see which methods exist with tree and which stay with node and find out why is that
*** why adding ( blindly in _parenthesize_recur
*** while writing code make a note of which method is with tree or node
** examples where I've constructed trees in
*** expression tree
**** only used __init__ and attach
*** Hierarchy
**** findout methods introduced at different hierarchy level
**** findout methods for addition, deletion and arguments taken by their methods
** priority queue
***
* recursion
** in factorial program we update the result upstream
** in even_grand we were updating the value downstream
*** instead of doing some extra calculations to the result returned by unfloding of recursion we were just reassiigning the result
*** can I do it the other way around such that I calculate result upstream instead of downstream?
** unique paths
*** by passing the changed value directly in function call I need not set it to old value when recursion unfolds
*** understand how answer is being calculated as ans is being set to 0 in every recursion call
* comment convention
** need time to thnink more !t
** something is not clear !?
** this is good and you need to remember and follow this !!
* maximum score words
** trace how two lines of code could consider all possible combination of words!?
