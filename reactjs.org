* react is a library not framework
* react is not a complete solution. needs to be used by other libraries
* react is used to build user interface
* react is declarative
* framework take design decisions for us
* framework disadvantage
** lack of flexibility
** large and full of features
* react gives ability to work with virtual browser which is friendlier rather than browser dom
** virtual dom performs better
** react is just javascript
** we can user react in react native too
** declarative and state
* react basics
** components
** take input: props, state and output ui
** can contain private state
** reactive updates
*** when state changes, the ui changes
** virtual views in memory
*** we use js to generate html
*** no html template language
*** tree reconciliation, virtual dom
* component
** function or class
** prefer function over class
** they take props and state and output jsx
** props is similar to list of attributes and HTML can have
** props is explicit and state is implicit?
** state can be changed while props is fixed
** html in react component gets compiled to pure js calls React.createElement
* jsx compiles html in javascript. not browser
* babel compiles jsx into react react element
* first letter capital in react
* useState to createState
** returns getter and setter
* onClick takes function reference
* use paranthesis to break statement into mutiple lines
* even though rendering whole node, react is only updating timestamp and not whole dom
* react has smart diffing - only updates what actually needs to be regenerated
** it is possible because of reacts virtual dom
* props sent to component can be accessed by name of first argument to the function
* props cannot be changed by the component
** modern javascript
*** ECMAScript, which is the official specification that JavaScript conforms to
*** variables and block scopes
*** block scope is created by curly braces {}
*** they are different from function scopes
*** var in block scope is visible outside it too
*** we can use let to hide variables in block scope
*** let, const variable respect nested blocks too
*** references assigned with const cant be changed
*** if const variable holds mutable object, we can modify the object. but the reference is not changed
*** arrow functions
**** example
#+begin_src js
const afn = () => {
    console.log('Hello');
    }
#+end_src
**** regular function defined with function keywords, binds this to its caller
**** if there is no explicit caller, it will be tied to calling env
**** arrow fun not caring about who called it, will close over the value of the this keyword for its scope at the time it was defined.
**** This makes it great for delayed execution cases like events and listeners
**** Regular functions give access to their â€œcalling" environment while arrow functions give access to their "defining" environment
** Object Literals
*** property that holds a function
*** dynamic properties
*** property names to map values that exist in the current scope with the exact same name.
** Destructuring and Rest/Spread
*** const {PI, E, SQRT2} = Math;
*** in function parameters
#+begin_src javascript
const circleArea = ({radius}) => {
        (PI * radius * radius).toFixed(2); }
#+end_src
** Template Strings
*** the backtick character are called template strings. can be used as a template with dynamic values.
*** `<div>${Math.randon()}</div>`
*** you can also have multiple lines in the string
** Classes
*** supports object-oriented programming paradigm
*** Everything in JavaScript is an object, including functions.
*** Modern JavaScript also added support for the class syntax
*** is a template or blueprint for you to define shared structure and behavior between similar objects.
