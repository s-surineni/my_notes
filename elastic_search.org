* add a document
** PUT /customer/_doc/1
{
  "name": "John Doe"
}
* search for documents
** GET localhost_talend_lc.com/_doc/1
{
  "name": "John Doe"
}
* get mapping
** localhost:9200/localhost_talend_lc.com/_mapping
* liest all indices
** GET /_cat/indices?v
* query to get all documents
  #+BEGIN_SRC json
  query = {
  "query": { "match_all": {} }
  }
  #+END_SRC
* use source filter to fetch only certain fields
**
* use multiple filters in es 2.3 and specify type
  #+BEGIN_SRC json
  {
  "query":{
        "filtered": {
            "query": {
                "bool": {
                    "filter":
                        [
                        { "term": { "OpID": "0061P00000StDOA"}},
                        {"term": {"_type": "2019-13-12"}}]



        },}}

}
}
  #+END_SRC
* specify type in body in es 2.3
#+BEGIN_SRC
 {
  "query":{
        "filtered": {
            "query": {
                "bool": {
                    "filter":
                        [
                        { "term": { "OpID": "0061P00000StDOA"}},
                        {"term": {"_type": "2019-13-12"}}]



        },}}

}
}
#+END_SRC
* index maps to database
* type maps to table
* document maps to row
* es.indices.get_mapping(index=index) get all types
* get single document of a type
#+BEGIN_SRC json
query = {"query": { "match_all": {} },
         '_source': ['_id'],
         'size': 1
}
doc_type = ['2020-01-06']
res = es.search(index=index, body=query, doc_type=doc_type)
#+END_SRC
* get all unique values of a field
#+BEGIN_SRC json
{
  "size": 0,
  "aggs": {
    "pipeline_values": {
      "terms": {
        "field": "pipeline",
        "size": 500
      }
    }
  }
}

// This worked
query = {
    "size": 0,
# "_source": ["id"],
    "_source": ["as_of"],
    "aggs": {
        "uniq_id": {
            "terms": {
# "field": "_id",
                "field":"as_of",
                "size": "1000"
            }
        }
    }
}
#+END_SRC
