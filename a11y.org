* categories
** semantic web html
** keyboard access
** screen reader
** color contrast ratio
** aria
* guidelines
** WCAG
** need to meet for AA
* semantic structure
** each page should have title
** use lang="en" code in html
** landmarks
*** header, footer, main
** headings
** navigation
*** put inside <nav> landmark
*** put them in a list under <nav>
*** each link must have meaningful text not just click here
** images
*** informative
**** simple, complex
**** complex like charts
***** need supplemental text other than alt text
*** active images
**** images used as links, buttons
*** uninformative
**** decorative or redundant
***** put alt=""
** data tables
*** should have properties markup for header
*** caption table name
** color contrast
*** applies to text
*** default, hover, focus states
*** icons
*** user interface elements like form, button, menu
*** graphical objects like graphs
** forms
*** all inputs should contain labels
*** group labels
*** include instructions on how to field complex fields like date
** links
*** proper use of links and buttons
*** Avoid "clickable" <span>s or <div>s
** Build proper form HTML markup and relationships
*** form elements have associated visual <label>s
*** errors are clearly conveyed visually and to assistive technology
*** related fields are grouped in a <fieldset> with a <legend>
*** A placeholder attribute is not a substitute for a label
** Add alternative text to Informational icons & images and an empty alt attribute to Decorative images.
** Make sure your headings are in order; avoid skip-level headings, such as an <h3> immediately following an <h1>
** Ensure your UI is fully keyboard-accessible and follows expected keyboard interaction patterns.
** If your UI includes expandable sections, use proper HTML markup to indicate this behavior
** responsive layouts required for low vision users
** tools
*** a11y tree
**** you can check
* ARIA
** for dynamic content and custom components
** helps assistive technology users and screen reader users
** primary beneficiaries are blind and deaf blind people
** three types of attributes available in ARIA: roles, states, and properties.
** Roles
*** role is what the thing is semantically
**** image or list item
*** When you're working with a predefined composite ARIA pattern where you have more than one role, you'll need to add all of the necessary roles.
**** like tree and treeitem
*** give semantic meaning to HTML elements that traditionally do not have any semantic meaning, such as <div> or <span>
*** suppress elements role with role="presentation"
*** accessible names can be given by for attribute, aria-label, aria labelled by
*** you can have name to non semantic element
** extends kinds of components that can be created in html like modals, progress indicators
** aria-describedby can be used to
*** link error message to form element
*** instructions on filling form elements like case sensitive
*** it contains id of a visible element
* keyboard interaction
** keys to use
** key concepts
*** focus
*** functionality
*** user control
** focus test
*** hover over active elements if they are activated on hover same should happen on keyboard focus
*** keyboard trap is critical issue
*** focused element cannot be offscreen or invisible
*** inactive elements should not be focusible
** user control
*** key timing should not be there
* automated tools
** axe devtools extension
*** run tool with every state change
* screen reader
** semantic elements will has name, role and value
** should atleast have name and role
** should have headings and landmarks
** if text acts as heading we should use heading element
** text alternatives
*** informative images
*** information though color coding
** testing
*** check if proper headings and controls are used for rotor
* tools
** a11y tree
**** you can check name, role and attributes
* issues encountered
** sort button not in the table and not announcing sort order
** notification not announced by screen reader
