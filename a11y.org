* categories
** keyboard access
** screen reader
** aria
** semantic web html
** color contrast ratio
* guidelines
** WCAG
** need to meet for AA
* semantic structure
** each page should have title
** landmarks
*** header, footer, main
** use lang="en" code in html
** headings
** navigation
*** put inside <nav> landmark
*** put them in a list under <nav>
*** each link must have meaningful text not just click here
** images
*** informative
**** simple, complex
**** complex like charts
***** need supplemental text other than alt text
*** active images
**** images used as links, buttons
*** uninformative
**** decorative or redundant
***** put alt=""
** data tables
*** should have properties markup for header
*** caption table name
** color contrast
*** applies to text
*** default, hover, focus states
*** icons
*** user interface elements like form, button, menu
*** graphical objects like graphs
** forms
*** all inputs should contain labels
*** group labels
*** include instructions on how to field complex fields like date
** links
*** proper use of links and buttons
*** Avoid "clickable" <span>s or <div>s
** Build proper form HTML markup and relationships
*** form elements have associated visual <label>s
*** errors are clearly conveyed visually and to assistive technology
*** related fields are grouped in a <fieldset> with a <legend>
*** A placeholder attribute is not a substitute for a label
** Add alternative text to Informational icons & images and an empty alt attribute to Decorative images.
** Make sure your headings are in order; avoid skip-level headings, such as an <h3> immediately following an <h1>
** Ensure your UI is fully keyboard-accessible and follows expected keyboard interaction patterns.
** If your UI includes expandable sections, use proper HTML markup to indicate this behavior
** responsive layouts required for low vision users
** tools
*** a11y tree
**** you can check
* ARIA
** aira-disabled="true" doesnt remove element from tab order.
*** use aria-live instead to screen readers will annonce them
** role="alert" is a live region
** dont move focus for notifications
** for dynamic content and custom components
** helps assistive technology users and screen reader users
** primary beneficiaries are blind and deaf blind people
** three types of attributes available in ARIA: roles, states, and properties.
** Roles
*** role is what the thing is semantically
**** image or list item
*** When you're working with a predefined composite ARIA pattern where you have more than one role, you'll need to add all of the necessary roles.
**** like tree and treeitem
*** give semantic meaning to HTML elements that traditionally do not have any semantic meaning, such as <div> or <span>
*** suppress elements role with role="presentation"
*** accessible names can be given by for attribute, aria-label, aria labelled by
*** you can have name to non semantic element
** extends kinds of components that can be created in html like modals, progress indicators
** aria-describedby can be used to
*** link error message to form element
*** instructions on filling form elements like case sensitive
*** it contains id of a visible element
** static properties aria-valuemin, aria-valuemax
** dont use aria-hidden
** To add something to the natural tab order, if it's not already focusable add tabindex="0"
** To make something available to receive focus via JavaScript, add tabindex="-1" to the element. This is relevant, for example, when sending the focus to a modal dialogue.
** SPA move focus to new content or inject text into aria-live region
** don't send the focus to an empty container on purpose
** if you inject the content, then immediately send the focus to it, chances are that the focus will arrive before the screen reader realizes there's any content there
* keyboard interaction
** keys to use
** key concepts
*** focus
*** functionality
*** user control
** focus test
*** hover over active elements if they are activated on hover same should happen on keyboard focus
*** keyboard trap is critical issue
*** focused element cannot be offscreen or invisible
*** inactive elements should not be focusible
** user control
*** key timing should not be there
* automated tools
** axe devtools extension
*** run tool with every state change
* screen reader
** semantic elements will has name, role and value
** should atleast have name and role
** should have headings and landmarks
** if text acts as heading we should use heading element
** text alternatives
*** informative images
*** information though color coding
** testing
*** check if proper headings and controls are used for rotor
* tools
** a11y tree
**** you can check name, role and attributes
* issues encountered
** sort button not in the table and not announcing sort order
** notification not announced by screen reader
* approaches
** to make text focusable we can put it in a button and remove styling
** The main takeaways from this order of events are: number one, don't make something disappear while it still has the keyboard focus.
*** Number two, you may need to move the focus temporarily to something that is always visible, like the heading on this page, as a way to make sure the focus doesn't get lost.
*** And three, before moving the focus to new content that was previously hidden or unavailable, inserting a brief delay is often necessary to allow the screen reader to catch up. The screen reader needs to process the new markup and interpret the accessibility features of that markup. If you send the focus before the screen reader has time to process it, the screen reader is likely to say nothing at all, even though the focus is on the correct
*** And by the way, you can't send the focus to just any element. It has to be either naturally focusable or it has to have tab index of negative one, which makes it focusable by JavaScript, and that's what I did in this case. It has tabindex of negative one.
