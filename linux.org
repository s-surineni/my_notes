* service gunicorn stop
* find
** find . -iname <fname>
** check only in current directory
#+begin_src shell
find . -maxdepth 1 -name *.sh
#+end_src
** find number of directories
** find . -maxdepth 1 -type d | wc -l
* directories occupying space
#+begin_src bash
du -a /home | sort -n -r | head -n 5
du -h --max-depth=1
du -sh *
#+end_src
* grep
** grep only file name
#+begin_src bash
grep -ilr $search_str logs
#+end_src
** grep for whole word
#+begin_src bash
grep -rw "Attempt" logs/07Lxx000000511tEAA.log
#+end_src
** grep all files only in current directory
 #+begin_src bash
 grep "string" * .*
 #+end_src
** grep recursively in directory
 #+begin_src shell
 grep -r "INSIGHTS_ELT_SCHEDULER_ACTION" .
 #+end_src
** grep only in certain file types
 #+begin_src shell
 grep -r --include="*.java" --include \*.cpp "INSIGHTS_ELT_SCHEDULER_ACTION" .
 #+end_src
** grep exclude directories
#+begin_src shell
grep -r --include="*Handler.java" --exclude-dir="*test*" INSIGHTS_ELT_SCHEDULER_ACTION
#+end_src
* might help with config
#+begin_src bash
export P4CLIENT=ssurineni-ltm-blt-2
bootstrap bundle:core-app
above two should be done together
corecli core:config

#+end_src
**  I just did "bootstrap bundle:core-app" and open a new window. it resolved my issue.
** bootstrap bundle:perforce -f
It should prompt for your p4 settings and save them where they need to go.
bootstrap bundle:core-app
*** this worked
* echo "10.195.162.132 ssurineni-ltm ssurineni-ltm.internal.salesforce.com" | sudo tee -a /etc/hosts
* gpg issue
#+begin_src shell
git config --global user.signingkey <short Key ID>
#+end_src
* temp config
** my default gateway is 10.2.2.2
** ip addr is 10.0.2.15/24
** dns server 192.168.29.1
* echo $P4_PASSWD | p4 -u $P4_USER login
* sed
** replace all occurences in a directory
#+begin_src shell
find . -type f -name 'xa*' | xargs sed -i 's/asd/dsg/g'
find . -type f -name '*.apex' | xargs gsed -i 's/vlocity_digital/vlocity_lwc51/g'
find ./ -type f -exec sed -i -e 's/apple/orange/g' {} \;
#+end_src
** sed -i to edit file in place
** sed command syntax [addr]X[options]
** sed 's/unix/linux/' geekfile.txt substitute replace
** sed -i '' '/HEAP_ALLOCATE/d' edited.log        # deletes lines from file
* p4 client -o $P4CLIENT  | sed -e '1,/^View:/!d' | sed 's/^Host:.*\$//p' | sed -e '/^View:/a "$workspace"' | p4 client -i
** this can include new lines
* ~/bin/sqldeveloper.sh > /dev/null 2>&1 &
* systemctl list-units
* journalctl -u service2
* find number of folders
#+begin_src shell
find . -maxdepth 1 -type d | wc -l
#+end_src
* forward ports
#+begin_src shell
# SSH command for setting up tunnel to port 6109 on CIAB VM to localhost 6109
ssh -L 6109:127.0.0.1:6109 -L 6101:127.0.0.1:6101 CIAB_VM_IP_Address
# Example: ssh -L -L 6101:127.0.0.1:61019 10.233.196.196
#+end_src
* rip grep commands
** rg 'cDeleteGenExec.exec_delete_Movie()' -g '*.sql'
** rg -l 'cDeleteGenExec.exec_delete_Movie()' -g '*.sql'  # file names only

*
* installation
** better to keep separate /var directory hierarchy in separate partition, so system log wont overwhelm rest of the system
* how boot process works
** motherboards have mini operating system hard coded into hardware
** old one is bios new one is uefi
** it looks for MBR(master book record)
** it loads GRUB bootloader into
** GRUB loads os kernel into memory
** vmlinux is compressed version of working linux kernel
* run level
** codes that tell linux how os should be running
** use systemctl to set run level
** change run level by systemctl isolate rescue.target
** to change default run level use systemctl enable multi-user.target
* file system hierarchy
** everything in linux is a plain text file
** file system hierarchy standard
** root directory is /
** /bin is for binary files
** /sbin same as above but for only multi user sessions
** /dev provides pseudo files for physical and virtual devices
* configuring environment
** locale
*** controls spelling and number format
** localectl
** env get all environment variables
** export sets value in child shells too
** we can use type to find out how bash runs the command
** timezonectl is used to set timezone
* hard disk management
** df will display all block devices currently mounted on the system, along with mount point
** mount point is the location on file system where we can find drive and its contents
** df -ht ext4
* all devices dvd, usb and modem are represented as file in /dev directory
* /dev/sda is the first data drive read by the system
* /dev/sdb is the second drive in the system
* if device is not mounted check it with lsblk | grep sd
* mounting the device
** create new folder in media directory
** sudo mkdir /media/newplace
** mount using command sudo mount /dev/sdb2 /media/newplace
* show all devices connected to system dmesg
* get hardware details using lshw
* software management
** sources.list file is present in /etc/apt
** software categories
*** main
*** restricted
*** universe
*** mutliverse: restricted usage
** third party repositories are added in the folder /etc/apt/sources.list.d/ directory
** sudo apt update updates the software index
** apt search helps to search for software, description
** apt is replacement for apt-get
* desktop
** there are 3 majorly
*** cinnamon/mate
*** gnome
*** xfce
* server
** server is any computer on which there's at least one process running, whose job is to serve the needs of remote user, usually called client
* server virtualization
** subset of techniques for partitioning a subset of physical computer, and uses it to launch independent operating system
** the operating system would feel that it is running on its own machine
** for ubuntu its better to use lxc virtualization via the lxd environment
** systemctl start httpd to start process
** systemctl enable httpd to start process each time we start the system
** ip a get the ip address
** default webroot is /var/www/html
** nextcloud can be used as own opensource dropbox
** snap is a kind of virtual partition exist in file system inside its own isolated environment
* compiling code
* getting command line help
** man wget
* type command tells how the command is run by the bash
* login shell and non login shell gets environment from different files (.profile/.bashrc)
* /etc/profile system wide shell settings are configured
* default shell for the user is specified in /etc/passwd
* linux syntax patterns
* ls -h gives size in human readable format
* we can use backslash \ to interpret special characters as literals
* the stdout can be redirected using 2>
* wget pluralsight.comm 2> errorfile.txt
* debugging hw issues
** check if device is recognised
** check if kernel module is loaded
** checking usb devices
*** lsusb
*** lspci will show devices connected through pci slots
*** lshw will show all hardware
** kernel moduels are stored in /lib/moduels directory
** uname -r gives kernel module we are currently running
** subsitute command values ls /lib/moduels/`uname -r`
** lsmod lists all loaded modules
** to load module use modprobe command
* network connection
** show network ip
** ip route show
** check dhcp client
** sudo dhclient
** ip addr tells the systems ip address
** netstat -i
* dns
** maps human readable addresses to ip addresses
** dns server finding out host ip
** host google.com
** dns server systemd-resolve --status
** manually creating dns indices
** add them in /etc/hosts
* scripting
** the first line of script has to tell linux its an executable and which shell interpreter to use, we use shebang line to do that, it contains absolute location of shell binary file too
** before we can run the script we have to change its mode to executable using chmod +x filename
** builtin and external commands
* important information is provided in /proc directory
** meminfo file contains capacity and usage levels of system memory
** cpuinfo tells info about cpu
** get system usage using top
** the most common culprit of system slowdown is memory unavailability
** use free to find out available memory
** know the state of all the storage devices mounted use df
** df -t ext4 gives only ext4 formatted partitions
* iftop is networking version of top
** know interface using ip addr and run sudo iftop -i eno1
* ps aux prints info about all the process running on the system
* now linux logs are available from journald interface
** journalctl --since "10 minutes ago"
** other log files are stored in /var/log directory
** most log messages will be sent to /var/log/
** dmesg manages messages coming from kernel ring buffer
** kernel ring buffer stores log messages from the most recent boot process
** any message sent to /dev/null will be instantly deleted
** kill <pid> kills one process
** killall kills all instances of program
* systemctl controls processes
** sudo systemctl status apache2
** sudo systemctl disable apache2 - will not run program on boot
** sudo systemctl start apache2
* process priorities
** we can assign process priorities using nice command
* working with users and groups
** /etc/shadow contains encrypted versions of user passwords
** /etc/passwd stores information related to each user
** similarly is /etc/group
** id returns groups of user
** who tells which users are currenly logged in
** w tells what the user is currently doing
** last gives system logins since the beginning of the
** creating user sudo useradd -m locke
** create temp password using sudo passwd locke
** create group sudo groupadd secret-group
** change owner ship of directory to group sudo chown :secret-group /var/secret
** add user to group sudo usermod -a -G secret-group locke
** give permissions for group members to change files sudo chmod g+w /var/secret/
* security
** every file and folder has metadata associated with it
** su is used to switch as different user
** ls -dl shows attributes of the directory
** to change the owner of directory run sudo chown me:secret-group /var/secret/
** by adding sicky bit value group members can only delete their own created files
*** we can add sticky value by command sudo chmod +t .
* updating packages
** sudo apt update && sudo apt upgrade
** sudo apt update updates the index
* network port
** network port is a number between 0 and 65535
** used by server to direct incoming requests
** helps use single network ip address to be used for multiple services
** stop attackers
*** restrict ssh login sessions to only clients with valid key pair(not password)
*** close unused pairs
** we cant close a particular port
*** a port is said open if a software is listening on that port
*** closing the port means shutting down the software
** firewall
*** could be a hardware or software like ip tables
*** firewall is made up of rules that are applied to every packet
*** how to figure out which software is running to stop it
**** nmap -v -sT localhost
** encryption
*** eCryptfs is popular for encrypting individual files or directories
*** cryptsetup is popular for encrypting entire volumes
* docker
** containers share single kernel along with host
* useful commands
#+begin_src bash
rm -rf logs && sfdx force:apex:log:get -n 1 -d ./logs && find logs -name '07L*' | xargs code
rm -rf logs && sfdx force:apex:log:get -n 25 -d ./logs && grep -ilr $search_str logs | xargs code

#+end_src
* find which package a file is present in
#+begin_src
sudo apt-cache search libqt5xml5
#+end_src
