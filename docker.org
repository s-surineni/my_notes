* build an image
** docker build -t test/cowsay-dockerfile .
* list images
** docker image ls
* delete an image
** docker image rm <imagename>
* list containers
** docker container ls
* run an image
** docker run debian echo "Hello World"
* stop container
** docker container stop <container-name>
* delete container
** docker container rm <container-name>
* run and get shell in an image
** docker run -i -t debian /bin/bash
* get info about container
** docker inspect stupefied_turing
* get what changed in container
** docker diff stupefied_turing
* get what happened
** docker logs stupefied_turing
* An exited container can be restarted by issuing docker start
* To get rid of the container, use the docker rm command:
* docker container prune remove all stopped containers
* docker run exec,
** run starts container
** exec does something in already started container
* To commit, we need to give the command the name of the container (“cowsay”) a name for the image (“cowsayimage”) and the name of the repository to store it in (“test”):
** docker commit cowsay test/cowsayimage

* docker rm -v $(docker ps -aq -f status=exited)
* run with --rm flag to delete container and file system after exit
* docker run test/cowsay-dockerfile /usr/games/cowsay "Moo"
** starts a container, runs command and exits
* The ENTRYPOINT instruction lets us specify an executable that is used to handle any arguments passed to docker run.
* run image in background
** docker run --rm -it --link myredis:redis redis /bin/bash
* link two containers
**  docker run --rm -it --link myredis:redis redis /bin/bash
* docker running example postgres
** docker run  -v my_dbdata:/var/lib/postgresql/data -p 54320:5432 postgres:12.1
** docker exec -it d7 psql -U thebadservice
* volumes
** docker volume create
** docker volume ls
** docker volume rm <volume-name> : delete a volume
* remove all containers
** docker rm $(docker ps -aq)
* docker run command overrides CMD instruction of dockerfile
* docker port port-test gives ports used by container
* docker stop $(docker ps -q) stop all docker containers
* docker rm $(docker ps -aq) remove/delete all docker containers
*  docker exec -it mesql mysql -p
** connecting to mysql continer by name mesql
* docker sets limits on how much system resources it can use
* namespace and control group and unified file system
* docker network
** list existing networks
#+begin_src shell
docker network ls
#+end_src
* The -dit flags mean to start the container detached (in the background), interactive (with the ability to type into it), and with a TTY (so you can see the input and output).
* docker attach command
* detach sequence, CTRL + p CTRL + q
* docker network inspect rabbit-nw
* mount current directory in docker
#+begin_src shell
docker run --rm --network rabbit-nw -v ${PWD}:/usr/src/app py3 python send.py
#+end_src
* docker system prune
* delete remove all stopped containers
#+begin_src shell
docker rm $(docker ps -a -q)
#+end_src
* delete all images with
#+begin_src shell
docker rmi $(docker images -q)
#+end_src
* update and stop a container that is in a crash-loop with docker update --restart=no && docker stop
* bash shell into container docker exec -i -t /bin/bash - if bash is not available use /bin/sh
* bash shell with root if container is running in a different user context docker exec -i -t -u root /bin/bash
* To override the default echo message in our example and run the container interactively, we use the command:
#+begin_src shell
sudo docker run -it --entrypoint /bin/bash [docker_image]
#+end_src
* run docker command
#+begin_src shell
docker run -it --volume "$(PWD)":/code lol python manage.py makemigrations lists
#+end_src
* theory
** containers share kernel of the host they are running on
* docker compose
** multi container
** contains network, volume and services
** looks for compose.yaml
* start image with shell
** docker compose run my-react-app sh
