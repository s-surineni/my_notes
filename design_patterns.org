* types of patterns
** creational
** structural
** behavioral
* creational
** singleton
** builder
** prototype
** factory
** abstract factory
* singleton pattern
** guarantees only one instance is going to be created
** guarantees control of the resource
** usually lazily loaded
** examples
*** runtime
*** logger
*** spring beans
*** graphics managers
** responsible for creating itself
** static in nature
** not a static class because it needs to be thread safe
** private instance
** private constructor
** no parameters - parameters violates rule of singleton
** pitfalls
*** over used
*** difficult to test
*** not thread safe if not careful
*** may be confused with factory, if constructor takes arguments, it should be considered factory
** no interface unlike factory which is interface driven
** The Singleton pattern refers to having only one object of a class
** Another goal of the Singleton design pattern is that the single object is globally accessible within the program.
** have a private constructor
** use a private class variable which holds single instance of the class
** use a public method to create single instance if it doesn't exist already
**  If there are multiple computing threads running, there could be issues caused by the threads trying to access the shared single object.
* builder pattern
** for constructing objects that have lots of parameters
** make object immutable once it is constructed
** Examples
*** string builder
*** document builder
*** Locale.builder
** creating multiple constructors with parameter variation is called telescoping constructor
** typically written with static inner class
** negates the need for exposed setters
** is it bad if object is mutable?
** with builder pattern we can skip writing multiple constructors with different combination of parameters
** we can also write builder in such a way that we can force certain parameters must be passed
* prototype
** avoids costly creation
** avoids subclassing
** typically dont use new
** often utilizes interface
** usually implemented with registry
** example java.lang.Object#clone()
** object is expensive to create?(may be hard to get its field values)
** we copy member variables instead of creating it
** can utilize parameters for clone
** implements clone and clonable
** shallow vs deep copy
** builder is opposite of prototype
** pitfalls
*** not clear when to use
*** used with another pattern
*** shallow vs deep copy
** helps with performance issues
** think of using prototype before going to factory
* facade pattern
** A facade is a wrapper class that encapsulate the subsystem in order to hide the subsystem's complexity.
** This wrapper class will allow a client class to interact with the subsystem through a facade
** You need a class to act as an interface between your subsystem and a client class.
** You need to simplify the interaction with your subsystem for client classes.
** The facade design pattern provides a single simplified interface for client classes to interact with the subsystem.
** facade does not actually add more functionality,
** a facade simply acts as a point of entry into your subsystem.
** Since the entire point of the facade design pattern is to hide complexity, we use the information hiding design principle to prevent all client classes from seeing the account objects and how these accounts behave.
** handles instantiation and redirection of tasks to the appropriate class within the subsystem
* factory method pattern
** doesn't expose instantiation logic
** defers instantiation logic to subclass
** client only knows common interface
** examples
*** calendar
*** resource bundle
*** number format
** objects created are referenced through a common interface
** the create method is parameterized
** the create method is static?
** move the code for deciding which type of knife to create, and the code for deciding which subclass of knife to instantiate into the class for this factory.
** a factory object is an instance of such a class, which has a method to create product objects.
** the knifeStore and its orderKnife method may not be the only client of your knifeFactory.
**  If there are multiple clients that want to instantiate the same set of classes, then by using a factory object, you have cut out redundant code and made the software easier to modify.
** If you change the way that sub-classes are instantiated, you only need to change your factory, rather than every client.
** Using factories, makes your software easier to maintain and change because object creation happens in the factories.
** You will soon see that concrete instantiation will be the primary purpose for our factories
** Instead of using a separate object, a factory object to create the objects, the factory method uses a separate method in the same class to create the objects.
** To create specialized product objects, a factory object approach would subclass the factory class.
**  For example, a subclass of our knife factory called budget knife factory could create budget chefs knife and budget steak knife product objects.
** A factory method approach instead, has a budget knife store subclass of knife store. The budget knife store has a method, the factory method, that is responsible for creating budget chefs knife and budget steak knife product objects instead
** The factory method design intent is to define an interface for creating objects, but let the sub-classes decide which class to instantiate.
** We have an abstract creator class.
** This class contains methods that only operate on generalizations.
** In other words, as long as we give these methods the products they want to operate on, the're happy.
**  Factories allow client code to operate on generalizations. This is called coding to an interface, not an implementation.
** • first create abstract class
• default no orgs constructor
• public create method
• all the concrete classes will override create method?
• the concrete classes will override this create method
• factory is another classnamed with factory at the end
• will have switch case
• default case for null
• we call factory class
• it calls subclasses which have create method
• this create method is overridden from base class
• better to use enum rather than string literals in switch statement
• What happens if we don't call create method in constructor?
• pitfalls
• complexity due to multiple classes and methods
• creation doesn't ca take place in factory class but in subclass
• singleton cannot have interface and subclasses?
• parameter driven
• Opposite of singleton
• Patterns stand on their own
* abstract factory
** factory of factories
** it can be implemented without using factory pattern
** factory of related objects
** example: DocumentBuilder
** often implemented in frameworks
** group collection of factories together
** it has a common interface that is carried throught the abstract factory, down through the concrete factory and to the implementing class
** has parameterized create methods
** built using composition
* adapter pattern
** can be used to connect new code to legacy code
** convert one interface into another
** examples: collections, streams
** client centric
** Software systems also face the same compatibility issue. Instead of having physical connectors, systems will have incompatible software interfaces.
** The adapter design pattern will help facilitate communication between two existing systems by providing a compatible interface.
** The client class will be part of your system that wants to use a third-party library or external system.
**  The adaptee is a class in the third-party library or external system to be used.
**  The adapter class sits in between the client and the adaptee
** It will implement a target interface which is the interface that the client will use. The adapter conforms to what the client is expecting to see.
** pitfalls
** dont complicate
** dont add functionality
** handles legacy code
* bridge pattern
** similar to adapter
** works with new code
** decouples abstraction and implementation (like dependency inversion?)
** uses encapsulation, composition and inheritance
** changes in abstraction wont affect the client
** we choose this because we know details wont be right to begin with
** examples
*** drivers, jdbc
** uses interfaces and abstract classes
** places emphasis on composition over inheritance
** expect changes from both sides
** abstraction, implementor, refined abstraction, concrete implementor
* This technique is an example of the factory method design pattern, as we provide a subclass the means to control the type of node that is created within methods of the parent class.
* proxy
** helps defering create resource intensive objects
** acts as a local representation of remote system
** control access to specific objects
** same interface for real and proxy classes
** You need to support resource-hungry objects, and you do not want to instantiate such objects unless and until they are actually requested by the client.
* facade pattern
**  The facade design pattern provides a single simplified interface for client classes to interact with the subsystem.
** Keep in mind that a facade does not actually add more functionality, a facade simply acts as a point of entry into your subsystem.
** A facade is a wrapper class that encapsulate the subsystem in order to hide the subsystem's complexity.
**  This wrapper class will allow a client class to interact with the subsystem through a facade.
** example
*** Without a facade class, the customer class would contain instances of the checking, saving and investment classes.
*** This means that the customer is responsible for properly instantiating each of these constituent classes and knows about all their different attributes and methods
*** Instead, we introduce the bank service class to act as a facade for the checking, saving, and investment classes
*** Since the three different accounts all implement the IAccount interface,
*** the bank's service class is effectively wrapping the account interfacing classes, and presenting a simpler front to them for the customer client class to use.
** It combines interface implementation by one or more classes which then gets wrapped by the facade class
** in practice, a facade class can be used to wrap all the interfaces and classes for a subsystem.
** note is that we set the access modifiers for each account to be private.
** The facade design pattern is a means to hide the complexity of a subsystem by encapsulating it behind a unifying wrapper called a facade class;
** removes the need for client classes to manage a subsystem on their own, resulting in less coupling between the subsystem and the client classes;
** handles instantiation and redirection of tasks to the appropriate class within the subsystem;
** provides client classes with a simplified interface for the subsystem;
** acts simply as a point of entry to a subsystem and does not add more functionality to the subsystem.
* decorator pattern
** notion of a class and relationships like inheritance are static.
** That is, happen at compile time.
** This means that we cannot make changes to classes while our program is running
** uses aggregation to comabine behaviors at runtime
** Aggregation is used to represent a "has a" or "weak containment" relationship between two objects.
** The aggregation relationship is always one-to-one in the decorator design pattern in order to build up the stack so that one object is on top of another.
** the basic component class must be the first one in the stack
* beahavioral design pattern
** ways that individual objects collaborate to achieve a common goal.
* template method pattern
** The template method defines an algorithm's steps generally, deferring the implementation of some steps to subclasses.
** concerned with the assignment of responsibilities.
** Think of it like another technique to use when you notice you have two separate classes with very similar functionality in order of operations.
** implementation
*** need abstract super class
*** methods specific to subclass are abstract
*** there will be one template method that will be calling these abstract methods
** When you notice two classes with a very similar order of operations, you can choose to use a template method.
**  The template method pattern is a practical application of generalization and inheritance.
* chain of responsibility
** series of handler objects that are linked together
** similar to exception handling in java
** All the objects on the chain are handlers that implement a common method handle request declared in an abstract superclass handler.
** we want to make sure that each filter goes through the following steps.
***  First, check if a rule matches.
*** If it does match, do something specific.
*** If it doesn't match, call the next filter in the list.
** To achieve this, you can use the Template Pattern that you learned from an earlier lesson to ensure that each class will handle the request in a similar way following the required steps
** The intent of this design pattern is to avoid coupling the sender to the receiver by giving more than one object the chance to handle the request.
* state pattern
** The state pattern is primarily used when you need to change the behavior of an object based upon the state that it's in at run-time.
** Implementation
*** We will define a state interface with a method for each trigger that a state needs to respond to.
*** And we'll have state classes that implement the state interface.
*** State classes must implement the methods in this interface to respond to each trigger.
*** The vendingmachine class constructor will instantiate each of the state classes
*** The vendingmachine class would also have methods to handle the triggers as before, but now delegates handling to the current state object.
*** Notice now, how much cleaner the code is, without having long conditionals in these methods.
***  In our example,the vending machine is the context class.
*** It keeps track of it's current state.
***  When a trigger occurs and a request is asked of a context object, it delegates to a state object to actually handle the request.
***  The state pattern is useful when you need to change the behavior of an object based upon changes to its internal state.
***  You can also use the pattern to simplify methods with long conditionals that depend on the object state.
* command pattern
** Instead of having these objects directly communicating with each other, the command pattern creates a command object in between the sender and receiver
** the sender doesn't need to know about the receiver and the methods to call.
** The boss is encapsulating his commands into memos, the way requests could be encapsulated into command objects in software.
** The command pattern has another object that invokes the command objects to complete whatever task it is supposed to do, called the invoker.
** A command manager can also be used which basically keeps track of the commands, manipulates them and invokes them.
**  One purpose of using the command pattern is to store and schedule different requests.
** When an object calls a method of another object, you can't really do anything to the method calls.
** Turning the different requests in your software into command objects can allow you to treat them as the way you would treat other objects.
*** You can store these command objects into lists
*** you can manipulate them before they are completed
*** or you can put them onto a queue so that you can schedule different commands to be completed at different times.
*** Another important purpose of the command pattern is allowing commands to be undone or redone.
**** To achieve redo and undo functionality, your software will need two lists,
**** a history list which holds all the commands that have been executed,
**** and a redo list which would be used to put commands that have been undone.
** implementation
*** You have a command super-class and all commands will be instances of sub-classes of this command super-class.
*** Super-class defines the common behaviors of your commands.
*** Each command will have the methods execute, unexecute and isReversible.
*** These concrete command classes will call on specific receiver classes to deal with the actual work of completing the command.
*** This is a very important aspect of command objects.
*** They must keep track of a lot of details on the current state of the document in order for commands to be reversible.
*** When the execute and unexecute methods are called,
**** this is where the command object actually calls on the receiver, which in this case is the document to actually complete the work.
*** invoker
**** First, it will need a reference to the command manager, which is the object that manages the history and redo lists.
**** The invoker then creates the command object with the information needed to complete the command,
**** then calls the command manager to execute the command.
** Another main benefit of the command pattern is that it decouples the objects of your software program
** The command pattern also allows you to pull out logic from your user interfaces.
** Usually, code-to-handle requests is put into the event handlers of user interfaces.
* mediator pattern
** you will add an object that will talk to all of these other objects
** coordinate their activities
** instead of objects being engaged in various pairwise interactions, they all interact through the Mediator:
** The mediator can perform logic on these events
** the mediator can request information or behaviour from an object
** The objects associated with your mediator are called colleagues
** communication could be implemented as an Observer pattern.
** The communication could also occur through an event infrastructure.
** A common usage for the mediator pattern,  is for dialog boxes with many components.
** the mediator can quickly become very large.
** Large classes are generally discouraged because they make code more difficult to debug
* observer pattern
** First, we'll have a Subject superclass that defines three methods,
*** allow a new observer to subscribe,
*** allow a current observer to unsubscribe,
*** and notify all observers about a new blog post.
*** This superclass would also have an attribute to keep track of all the observers,
*** and will make an observer interface with methods that an observer can be notified to update itself
*** the Subscriber Class will implement the observer interface.
*** implementation
**** the subject superclass has three methods, register observer, unregister observer, and notify.
**** The observer interface only has the update method
**** If you know that you have many objects that rely on the state of one, the value of the observer pattern becomes more pronounced.
* MVC pattern
** model - view - controller
** The model contains the underlined data and logic users want to see and manipulate
**  A key part of the MVC pattern is that the model is self-contained. It has all of the state, methods and other data that it needs to exist on its own.
** view gives the user a way to see the model or at least parts of it
** When some value changes in the back end or the model
** it has to tell the view to update itself accordingly. This is done by using the Observer Design Pattern.
** In this case, any view is also an observer
** information about the user interaction is passed to a controller which is responsible for interpreting these requests and changing the model.
** MVC pattern basically uses the separation of concerns design principle
** Since our view is going to be an observer, we have to make the model unobservable.
** the controller does not make changes to the state of the model directly. It calls methods of the model to make changes
** The controller ensures that the views and the model are loosely coupled
* design principles underlying design patterns
** Liskov Substitution Principle
*** If a class, S, is a subtype of a class, B, then S can be used to replace all instances of B without changing the behaviors of a program.
*** There are a number of constraints that the Liskov Substitution Principle places on subclasses in order to enforce proper use of inheritance
*** The Liskov Substitution Principle helps us determine if inheritance has been used correctly.
** As a software developer, you should strive to create systems that are flexible and reusable.
*** Flexible code bases allow for easier extension of the system.
** Open/Closed Principle
*** classes should be open for extension, but closed to change
*** During the lifetime of your software, certain classes should be closed, to avoid introducing undesirable side effects.
*** The Open/Closed Principle is used to keep the stable parts of your system separate from the varying parts.
*** By using extension over change, you can work on the varying parts without introducing unwanted side effects into the stable parts.
*** Varying parts of a system should be kept isolated from each other. Since these extensions will eventually become stable and become integrated into your production, there's no guarantee that they'll all be completed at the same time.
***  You should consider a class as being "closed" to editing, once it has been
****  tested to be functioning properly.
**** The class should be behaving as you would expect it to behave.
**** All the attributes and behaviors are encapsulated, and proven to be stable within your system.
**** The class, or any instance of the class should not stop your system from running, or do any harm to it.
*** The Open/Closed Principle is used to keep the stable parts of your system separate from the varying parts
** dependency inversion principle
*** The principle states that high level modules should depend on high level generalizations and not on low level details.
*** This means that your client classes should depend on an interface or abstract class instead of referring to concrete resources
*** your concrete resources should have their behaviors generalized into an interface or abstract class.
*** veryyyy similar to dependency injection
** composing objects principle
*** This principle states that classes should achieve code reuse through aggregation rather than inheritance.
*** Delegation will provide a loser level of coupling that inheritance
*** dynamically change the behaviors of objects at run time. You can build up a new overall combination of behavior by composing objects. With inheritance, the behaviors of your classes are defined during compiled time
** interface segregation principle
*** The interface segregation principle states that a class should not be forced to depend on methods it does not use. This means that any classes that implement an interface should not have dummy implementations of any methods defined in the interface. Instead, you should split large interfaces into smaller generalizations. So how does this work?
*** So we should apply the interface segregation principle and split the ICashier interface into two smaller ones.
** principle of least knowledge
*** that classes should know about and interact with as few other classes as possible.
*** all the rules come down to the principle that you should not allow a method to access another method by reaching through an object
*** The other way you can reach through an object is when your method receives an object of an unknown type as a return value and you make method calls to the returned object.
